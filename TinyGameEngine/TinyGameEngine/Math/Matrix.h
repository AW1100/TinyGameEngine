#pragma once


namespace MathUtil
{
	template <typename T>
	class Matrix3
	{
	public:
		Matrix3() 
		{
			m[0][0] = 0.0f; m[0][1] = 0.0f; m[0][2] = 0.0f;
			m[1][0] = 0.0f; m[1][1] = 0.0f; m[1][2] = 0.0f;
			m[2][0] = 0.0f; m[2][1] = 0.0f; m[2][2] = 0.0f;
		}
		Matrix3(T _00, T _01, T _02,
			T _10, T _11, T _12,
			T _20, T _21, T _22)
		{
			m[0][0] = _00; m[0][1] = _01; m[0][2] = _02;
			m[1][0] = _10; m[1][1] = _11; m[1][2] = _12;
			m[2][0] = _20; m[2][1] = _21; m[2][2] = _22;
		}
		
		//Matrix3(const Matrix4& other);

		/*static Matrix3& Identity()
		{
			return Matrix3(1.0f);
		}*/

	public:
		T m[3][3];
	};

	template <typename T>
	class Matrix4
	{
	public:
		Matrix4() 
		{
			m[0][0] = 0.0f; m[0][1] = 0.0f; m[0][2] = 0.0f; m[0][3] = 0.0f;
			m[1][0] = 0.0f; m[1][1] = 0.0f; m[1][2] = 0.0f; m[1][3] = 0.0f;
			m[2][0] = 0.0f; m[2][1] = 0.0f; m[2][2] = 0.0f; m[2][3] = 0.0f;
			m[3][0] = 0.0f; m[3][1] = 0.0f; m[3][2] = 0.0f; m[3][3] = 1.0f;
		}
		Matrix4(T _00, T _01, T _02, T _03,
			T _10, T _11, T _12, T _13,
			T _20, T _21, T _22, T _23,
			T _30, T _31, T _32, T _33)
		{
			m[0][0] = _00; m[0][1] = _01; m[0][2] = _02; m[0][3] = _03;
			m[1][0] = _10; m[1][1] = _11; m[1][2] = _12; m[1][3] = _13;
			m[2][0] = _20; m[2][1] = _21; m[2][2] = _22; m[2][3] = _23;
			m[3][0] = _30; m[3][1] = _31; m[3][2] = _32; m[3][3] = _33;
		}
		//Matrix4(const Matrix3& other);

	public:
		T m[4][4];
	};
}



